(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
/* Font Face Observer v2.1.0 - Â© Bram Stein. License: BSD-3-Clause */(function(){function l(a,b){document.addEventListener?a.addEventListener("scroll",b,!1):a.attachEvent("scroll",b)}function m(a){document.body?a():document.addEventListener?document.addEventListener("DOMContentLoaded",function c(){document.removeEventListener("DOMContentLoaded",c);a()}):document.attachEvent("onreadystatechange",function k(){if("interactive"==document.readyState||"complete"==document.readyState)document.detachEvent("onreadystatechange",k),a()})};function t(a){this.a=document.createElement("div");this.a.setAttribute("aria-hidden","true");this.a.appendChild(document.createTextNode(a));this.b=document.createElement("span");this.c=document.createElement("span");this.h=document.createElement("span");this.f=document.createElement("span");this.g=-1;this.b.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.c.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";
this.f.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.h.style.cssText="display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;";this.b.appendChild(this.h);this.c.appendChild(this.f);this.a.appendChild(this.b);this.a.appendChild(this.c)}
function u(a,b){a.a.style.cssText="max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;white-space:nowrap;font-synthesis:none;font:"+b+";"}function z(a){var b=a.a.offsetWidth,c=b+100;a.f.style.width=c+"px";a.c.scrollLeft=c;a.b.scrollLeft=a.b.scrollWidth+100;return a.g!==b?(a.g=b,!0):!1}function A(a,b){function c(){var a=k;z(a)&&a.a.parentNode&&b(a.g)}var k=a;l(a.b,c);l(a.c,c);z(a)};function B(a,b){var c=b||{};this.family=a;this.style=c.style||"normal";this.weight=c.weight||"normal";this.stretch=c.stretch||"normal"}var C=null,D=null,E=null,F=null;function G(){if(null===D)if(J()&&/Apple/.test(window.navigator.vendor)){var a=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))(?:\.([0-9]+))/.exec(window.navigator.userAgent);D=!!a&&603>parseInt(a[1],10)}else D=!1;return D}function J(){null===F&&(F=!!document.fonts);return F}
function K(){if(null===E){var a=document.createElement("div");try{a.style.font="condensed 100px sans-serif"}catch(b){}E=""!==a.style.font}return E}function L(a,b){return[a.style,a.weight,K()?a.stretch:"","100px",b].join(" ")}
B.prototype.load=function(a,b){var c=this,k=a||"BESbswy",r=0,n=b||3E3,H=(new Date).getTime();return new Promise(function(a,b){if(J()&&!G()){var M=new Promise(function(a,b){function e(){(new Date).getTime()-H>=n?b(Error(""+n+"ms timeout exceeded")):document.fonts.load(L(c,'"'+c.family+'"'),k).then(function(c){1<=c.length?a():setTimeout(e,25)},b)}e()}),N=new Promise(function(a,c){r=setTimeout(function(){c(Error(""+n+"ms timeout exceeded"))},n)});Promise.race([N,M]).then(function(){clearTimeout(r);a(c)},
b)}else m(function(){function v(){var b;if(b=-1!=f&&-1!=g||-1!=f&&-1!=h||-1!=g&&-1!=h)(b=f!=g&&f!=h&&g!=h)||(null===C&&(b=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent),C=!!b&&(536>parseInt(b[1],10)||536===parseInt(b[1],10)&&11>=parseInt(b[2],10))),b=C&&(f==w&&g==w&&h==w||f==x&&g==x&&h==x||f==y&&g==y&&h==y)),b=!b;b&&(d.parentNode&&d.parentNode.removeChild(d),clearTimeout(r),a(c))}function I(){if((new Date).getTime()-H>=n)d.parentNode&&d.parentNode.removeChild(d),b(Error(""+
n+"ms timeout exceeded"));else{var a=document.hidden;if(!0===a||void 0===a)f=e.a.offsetWidth,g=p.a.offsetWidth,h=q.a.offsetWidth,v();r=setTimeout(I,50)}}var e=new t(k),p=new t(k),q=new t(k),f=-1,g=-1,h=-1,w=-1,x=-1,y=-1,d=document.createElement("div");d.dir="ltr";u(e,L(c,"sans-serif"));u(p,L(c,"serif"));u(q,L(c,"monospace"));d.appendChild(e.a);d.appendChild(p.a);d.appendChild(q.a);document.body.appendChild(d);w=e.a.offsetWidth;x=p.a.offsetWidth;y=q.a.offsetWidth;I();A(e,function(a){f=a;v()});u(e,
L(c,'"'+c.family+'",sans-serif'));A(p,function(a){g=a;v()});u(p,L(c,'"'+c.family+'",serif'));A(q,function(a){h=a;v()});u(q,L(c,'"'+c.family+'",monospace'))})})};"object"===typeof module?module.exports=B:(window.FontFaceObserver=B,window.FontFaceObserver.prototype.load=B.prototype.load);}());

},{}],2:[function(require,module,exports){
"use strict";

var _fontfaceobserver = _interopRequireDefault(require("fontfaceobserver"));

var _hamburgerMenu = _interopRequireDefault(require("./hamburger-menu.js"));

var _elementClosestPolyfill = _interopRequireDefault(require("./polyfills/element.closest.polyfill.js"));

var _contactHelpFaqPopover = _interopRequireDefault(require("./contact-help-faq-popover.js"));

var _languageSelect = _interopRequireDefault(require("./language-select.js"));

var _header = _interopRequireDefault(require("./header.js"));

var _tracking = _interopRequireDefault(require("./utils/tracking.js"));

var _showVerifiedInfo = _interopRequireDefault(require("./show-verified-info.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function loadFonts() {
  const faktFont = new _fontfaceobserver.default("Fakt", {
    weight: 600
  });
  faktFont.load().then(() => {
    document.documentElement.style.visibility = "visible";
  }, () => {
    // even if loading fails, show html and it will use the fallback font
    document.documentElement.style.visibility = "visible";
  });
}

document.addEventListener("DOMContentLoaded", () => {
  // polyfills
  (0, _elementClosestPolyfill.default)(); // common

  loadFonts();

  _hamburgerMenu.default.init();

  _contactHelpFaqPopover.default.init(_tracking.default);

  _header.default.init();

  _languageSelect.default.init(_tracking.default);

  _showVerifiedInfo.default.init(); // Listen to tab events to enable outlines (accessibility improvement)


  document.body.addEventListener("keyup", function (e) {
    if (e.which === 9) {
      /* tab key */
      document.documentElement.classList.remove("no-focus-outline");
    }
  });
});

},{"./contact-help-faq-popover.js":3,"./hamburger-menu.js":4,"./header.js":5,"./language-select.js":6,"./polyfills/element.closest.polyfill.js":8,"./show-verified-info.js":9,"./utils/tracking.js":10,"fontfaceobserver":1}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const contactHelpFaqPopover = {
  init(tracking) {
    this.tracking = tracking;
    const helpLinkEls = document.querySelectorAll("a[href='/help']");
    this.contactHelpFaqPopoverEl = document.querySelector(".js-contact-help-faq-popover");
    const faqListEl = this.contactHelpFaqPopoverEl.querySelector(".js-faq-list");
    const faqLinks = faqListEl.querySelectorAll("a");
    this.contentAreaEl = this.contactHelpFaqPopoverEl.querySelector(".js-content-area");
    this.initialContent = this.contentAreaEl.innerHTML; // delegate event listeners

    this.contactHelpFaqPopoverEl.addEventListener("click", e => {
      // close widget
      if (e.target.closest(".js-close")) {
        e.preventDefault();
        this.backToList();
        this.contactHelpFaqPopoverEl.style = "display: none;";
      } // return to list of questions


      if (e.target.closest(".js-back")) {
        e.preventDefault();
        this.backToList();
      } // question link click


      if (e.target.closest(".js-faq-question")) {
        e.preventDefault();
        this.insertAnswer(e);
      }
    }); // event listener to open widget, attach to all help links

    for (let i = 0; i < helpLinkEls.length; i++) {
      helpLinkEls[i].addEventListener("click", e => {
        e.preventDefault();
        this.tracking.send("help", "help_contact_click", e.target.getAttribute("data-location"));
        this.contactHelpFaqPopoverEl.style = "display: block;";
      });
    }
  },

  backToList() {
    // insert initial content back into content areas
    this.contactHelpFaqPopoverEl.setAttribute("data-view", "list");
    this.contentAreaEl.innerHTML = this.initialContent;
    this.contentAreaEl.scrollTop = 0;
  },

  insertAnswer(e) {
    const question = e.target.innerText;
    const answer = e.target.closest("li").querySelector(".js-faq-answer").innerHTML;
    const content = `
      <div class="faq-answer-content">
        <h3>${question}</h3>
        ${answer}
      </div>
    `;
    this.contactHelpFaqPopoverEl.setAttribute("data-view", "answer");
    this.contentAreaEl.innerHTML = content;
    this.contentAreaEl.scrollTop = 0;
  }

};
var _default = contactHelpFaqPopover;
exports.default = _default;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const hamburgerMenu = {
  init() {
    this.bindCloseAnywhere();
    this.bindMenuClicks(); // if the menu is already open on load, toggle body class

    if (location.hash === "#sidebar-menu") {
      document.querySelector("body").classList.add("sidebar-menu-is-open");
    } else {
      document.querySelector("body").classList.add("sidebar-menu-is-closed");
    }
  },

  bindMenuClicks() {
    document.querySelector(".js-menu-icon-container").addEventListener("click", e => {
      const menuTriggerEl = e.target.closest("a");

      if (menuTriggerEl) {
        this.handleMenuClick(e);
      }
    });
  },

  bindCloseAnywhere() {
    const bgClickElement = document.querySelector(".js-sidebar-menu");
    bgClickElement.addEventListener("click", () => {
      location.href = "#";
    });
  },

  handleMenuClick(e) {
    const menuTriggerEl = e.target.closest("a"); // when menu is open, disable scrolling on body via a class

    const bodyEl = document.querySelector("body");

    if (menuTriggerEl.hasAttribute("data-menu-is-open")) {
      bodyEl.classList.add("sidebar-menu-is-open");
      bodyEl.classList.remove("sidebar-menu-is-closed");
    } else {
      bodyEl.classList.remove("sidebar-menu-is-open");
      bodyEl.classList.add("sidebar-menu-is-closed");
    }
  }

};
var _default = hamburgerMenu;
exports.default = _default;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tracking = _interopRequireDefault(require("./utils/tracking.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const header = {
  init() {
    this.trackLoginButtonClick();
    this.initProfileDropdownMenu();
    this.initClearSearchInput();
  },

  trackLoginButtonClick() {
    const loginButtonEl = document.querySelector(".js-header-login-button");
    if (!loginButtonEl) return;
    loginButtonEl.addEventListener("click", event => {
      event.preventDefault();

      _tracking.default.sendWithCallback("header", "login_button_click", "", () => {
        location.href = event.target.href;
      });
    });
  },

  initProfileDropdownMenu() {
    const containerEl = document.querySelector(".js-profile-dropdown-button-container");
    if (!containerEl) return;
    containerEl.addEventListener("click", e => {
      const button = e.target.closest(".js-profile-dropdown-button-trigger");

      if (button) {
        const isOpen = containerEl.getAttribute("state") === "open";
        const itemsContainerEl = containerEl.querySelector(".js-profile-dropdown-button-items");

        if (isOpen) {
          // close items
          itemsContainerEl.style.display = "none";
          containerEl.setAttribute("state", "closed");
        } else {
          // open items
          itemsContainerEl.style.display = "flex";
          containerEl.setAttribute("state", "open");
        }
      }
    });
  },

  initClearSearchInput() {
    const searchInputEl = document.querySelector(".js-query-search-input");
    const clearSearchButtonEl = document.querySelector(".js-search-query-clear-button");
    const searchFormEl = document.querySelector(".js-query-search-form");
    this.hideOrShowSearchCloseButton(searchInputEl.value, clearSearchButtonEl);
    searchFormEl.addEventListener("submit", e => {
      _tracking.default.sendWithCallback("header", "search_submit", searchInputEl.value, () => {
        location.href = `/search?query=${searchInputEl.value}`;
      });

      e.preventDefault();
    });
    searchInputEl.addEventListener("input", e => {
      this.hideOrShowSearchCloseButton(e.target.value, clearSearchButtonEl);
    });
    clearSearchButtonEl.addEventListener("click", e => {
      searchInputEl.value = "";
      this.hideOrShowSearchCloseButton(searchInputEl.value, clearSearchButtonEl);
      history.pushState({}, "", '/search');
      location.href = '/search';
    });
  },

  hideOrShowSearchCloseButton(query, clearSearchButtonEl) {
    if (query.length > 0) {
      clearSearchButtonEl.classList.remove("hidden");
    } else {
      clearSearchButtonEl.classList.add("hidden");
    }
  }

};
var _default = header;
exports.default = _default;

},{"./utils/tracking.js":10}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

const toArray = nodelist => Array.prototype.slice.call(nodelist);

const things = ['method', 'case', 'organization'];
const languageSelect = {
  redirectUrl: null,
  isThingDetailsPageWithLanguageParam: false,

  init(tracking) {
    this.tracking = tracking;
    this.generateRedirectPath();
    const selectEls = document.querySelectorAll(".js-language-select");
    if (!selectEls) return;
    toArray(selectEls).forEach(select => {
      select.addEventListener("change", e => {
        this.tracking.sendWithCallback("language", "language_dropdown", e.target.value, () => {
          this.handleSelectChange(e);
        });
      });
    });
  },

  handleSelectChange(e) {
    let redirectUrl = this.isThingDetailsPageWithLanguageParam ? `${this.redirectUrl}/${e.target.value}` : this.redirectUrl;
    location.href = `/set-locale?locale=${e.target.value}` + `&redirectTo=${redirectUrl}`;
  },

  generateRedirectPath() {
    this.redirectUrl = window.location.pathname;
    let urlPathMeta = window.location.pathname.split('/');

    if (urlPathMeta[1] && things.indexOf(urlPathMeta[1]) >= 0 && urlPathMeta[3]) {
      this.redirectUrl = `/${urlPathMeta[1]}/${urlPathMeta[2]}`;
      this.isThingDetailsPageWithLanguageParam = true;
    }
  }

};
var _default = languageSelect;
exports.default = _default;

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// ARIAmodal is included via a script tag in main.html
// because it doesn't use a module system and attaches to the window object instead
const modal = {
  updateModal(content) {
    document.querySelector("[data-modal-content]").innerHTML = content;
  },

  openModal(id, options = {}) {
    // open the modal
    // using setTimeout with 1 ms delay to simulate the _.defer function,
    // which forces the program to wait until the current call stack has cleared before calling open
    setTimeout(() => {
      ARIAmodal.openModal(options, id);
    }, 1); // if we are showing the close button,
    // make it visible and attach click handler

    const modalEl = document.getElementById(id);

    if (options.showCloseBtn) {
      modalEl.querySelector("[data-modal-footer]").style.display = "block";
      modalEl.addEventListener("click", e => {
        if (e.target.closest("[data-modal-close]")) {
          ARIAmodal.closeModal(options, id);
        }
      });
    } else {
      modalEl.querySelector("[data-modal-footer]").style.display = "none";
    }
  },

  closeModal() {
    ARIAmodal.closeModal();
  }

};
var _default = modal;
exports.default = _default;

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Element.closest polyfill
// https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill
// https://caniuse.com/#feat=element-closest
function _default() {
  if (!Element.prototype.matches) Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;

  if (!Element.prototype.closest) {
    Element.prototype.closest = function (s) {
      var el = this;
      if (!document.documentElement.contains(el)) return null;

      do {
        if (el.matches(s)) return el;
        el = el.parentElement || el.parentNode;
      } while (el !== null && el.nodeType === 1);

      return null;
    };
  }
}

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _modal = _interopRequireDefault(require("./modal.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const showMessageOnClick = {
  init() {
    const containerEl = document.querySelector(".js-show-verified-info-container");
    const isAdmin = document.querySelector(".js-is-admin") ? JSON.parse(document.querySelector(".js-is-admin").value) : false;
    const reviewedMessage = document.querySelector(".js-verified-message");
    console.log(isAdmin);
    if (!containerEl) return;
    containerEl.addEventListener("click", e => {
      const button = e.target.closest(".js-show-verified-info-trigger");

      if (button) {
        if (isAdmin) {
          window.open(window.location.href + "/edit", "_self");
        } else {
          this.openPublishingFeedbackModal(reviewedMessage.value);
        }
      }
    });
  },

  openPublishingFeedbackModal(message) {
    const content = `
      <p>${message}</p>
      `;

    _modal.default.updateModal(content);

    _modal.default.openModal("aria-modal");
  }

};
var _default = showMessageOnClick;
exports.default = _default;

},{"./modal.js":7}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

// Utility function to handle case when Google Analytics is down or slow.
// If the `event_callback` fn called in `sendWithCallback` hasn't been called within 1s, execute the callback.
// The following utility function accepts a function as input and returns a new function. If the returned function is called before the timeout period (the default timeout is one second), it clears the timeout and invokes the input function. If the returned function isn't called before the timeout period, the input function is called regardless.
function createFunctionWithTimeout(callback, opt_timeout) {
  var called = false;

  function fn() {
    if (!called) {
      called = true;
      callback();
    }
  }

  setTimeout(fn, opt_timeout || 1000);
  return fn;
}

const tracking = {
  send(eventCategory, eventAction, eventLabel = "") {
    if (!gtag) return;
    gtag("event", eventAction, {
      event_category: eventCategory,
      event_label: eventLabel,
      event_action: eventAction
    });
  },

  sendWithCallback(eventCategory, eventAction, eventLabel = "", callback) {
    if (!gtag) {
      callback();
      return;
    }

    gtag("event", eventAction, {
      event_category: eventCategory,
      event_label: eventLabel,
      event_action: eventAction,
      event_callback: createFunctionWithTimeout(callback)
    });
  }

};
var _default = tracking;
exports.default = _default;

},{}]},{},[2]);
